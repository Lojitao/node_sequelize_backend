#!/usr/bin/env node

let app = require('../app');
let debug = require('debug')('clwy-api:server');
let http = require('http');
const sequelize = require('../config/database');  // 引入 Sequelize 連接

let port = normalizePort(process.env.NODE_CONTAINER_PORT);

console.log('NODE容器端口',port);
app.set('port', port);

let server = http.createServer(app);

//先進行資料庫連接驗證
//要連接的是MySQL容器port，而不是對外暴露的port。
sequelize.authenticate()
  .then(() => {
    console.log('sequelize進行資料庫連接驗證，成功.');

    // 資料庫連接成功後再啟動伺服器
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  })
  .catch(err => {
    console.error('sequelize進行資料庫連接驗證，失敗！！！', err);
    process.exit(1);  // 若資料庫連接失敗，退出程序
  });

function normalizePort(val) {
  let port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}